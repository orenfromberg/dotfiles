# Based on:
# https://github.com/paulirish/dotfiles/blob/master/.bash_prompt
# which was inspired by gf3, sindresorhus, alrra, and mathiasbynens.

set_prompts() {

    local black="" blue="" bold="" cyan="" green="" orange="" \
          purple="" red="" reset="" white="" yellow=""


        if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then

            tput sgr0 # Reset colors

            bold=$(tput bold)
            reset=$(tput sgr0)

            # Ayu colors
            black=$(tput setaf 0)
            blue=$(tput setaf 4)
            cyan=$(tput setaf 6)
            green=$(tput setaf 2)
            brightred=$(tput setaf 9)
            purple=$(tput setaf 13)
            red=$(tput setaf 1)
            white=$(tput setaf 7)
            yellow=$(tput setaf 3)
            gray=$(tput setaf 10)

        else

            bold=""
            reset="\e[0m"

            black="\e[1;30m"
            blue="\e[1;34m"
            cyan="\e[1;36m"
            green="\e[1;32m"
            orange="\e[1;33m"
            purple="\e[1;35m"
            red="\e[1;31m"
            magenta="\e[1;31m"
            violet="\e[1;35m"
            white="\e[1;37m"
            yellow="\e[1;33m"

        fi


    # Only show username if not default
    function usernamehost() {

        userhost=""

        # Highlight the user name when logged in as root.
        if [[ "${USER}" != *"bob" ]]; then
            userhost+="\[${red}\]$USER ${white}at  ";
        fi;

        # If ssh'd into the box, highlight hostname
        if [[ "$SSH_TTY" ]]; then
          userhost+="${gray}[ssh to ${red}${HOSTNAME}${gray}]:";
        else
          userhost+="${cyan}$HOSTNAME${white}:";
        fi;

        echo $userhost "";
    }


    function prompt_git() {

        # check if we're in a git repo. (fast)
        git rev-parse --is-inside-work-tree &>/dev/null || return

        # Ensure the index is up to date.
        git update-index --really-refresh -q &>/dev/null;

        # check for what branch we're on. (fast)
        #   if… HEAD isn’t a symbolic ref (typical branch),
        #   then… get a tracking remote branch or tag
        #   otherwise… get the short SHA for the latest commit
        #   lastly just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git describe --all --exact-match HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";


        # check if it's dirty (slow)
        #   technique via github.com/git/git/blob/355d4e173/contrib/completion/git-prompt.sh#L472-L475
        unadded=$(git diff --no-ext-diff --quiet --ignore-submodules || echo -e "?")

        # Check for uncommitted changes in the index.
        uncommited=$(git diff --cached --quiet --ignore-submodules || echo -e "!")

        # Check for untracked files.
        untracked=$([ -n "$(git ls-files --others --exclude-standard)" ] && echo -e "+" )

        # Check if I have un-pushed commits
        count=$(git rev-list --count --right-only @{u}.. 2> /dev/null)
        if [[ $count -gt 0 ]]; then
          unpushed=$(echo -e "↑");

        # Check if upstream doesn't exist yet
        elif [[ -z "$count" ]]; then
          new=$(echo -e "∅");
        fi

        echo -e "${1}${branchName}${2}${untracked}${unadded}${uncommited}${3}${unpushed}${4}${new}";

        return
    }



    # ------------------------------------------------------------------
    # | Prompt string                                                  |
    # ------------------------------------------------------------------

    PS1="\[$(usernamehost)\]"                              # username at host
    PS1+="\[$blue\]\w"                                     # working directory
    PS1+="\$(prompt_git \"$white on $purple\" \"$yellow\" \"$red\" \"$brightred\")"   # git repository details\
    PS1+="\n"
    PS1+="\[$reset$blue\] > \[$reset\]"

    export PS1

    # ------------------------------------------------------------------
    # | Subshell prompt string                                         |
    # ------------------------------------------------------------------

    export PS2=" > "

    # ------------------------------------------------------------------
    # | Debug prompt string  (when using `set -x`)                     |
    # ------------------------------------------------------------------

    # When debugging a shell script via `set -x` this tricked-out prompt is used.

    # The first character (+) is used and repeated for stack depth
    # Then, we log the current time, filename and line number, followed by function name, followed by actual source line

    # FWIW, I have spent hours attempting to get time-per-command in here, but it's not possible. ~paul
    export PS4='+ \011\e[1;30m\t\011\e[1;34m${BASH_SOURCE}\e[0m:\e[1;36m${LINENO}\e[0m \011 ${FUNCNAME[0]:+\e[0;35m${FUNCNAME[0]}\e[1;30m()\e[0m:\011\011 }'
}



set_prompts
unset set_prompts
